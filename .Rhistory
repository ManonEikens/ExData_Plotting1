x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
indentical(vect, vect2)
?identical()
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?"matrix"
?matrix
my_matrix2(1:20, 4,5)
my_matrix2 <- matrix(1:20, 4,5)
indentical(my_matrix, my_matrix2)
identical(my_matrix, my_matrix2)
patients <- c('Bill', 'Gina', 'Kelly', 'Sean')
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c('patient', 'age', 'weight', 'bp', 'rating', 'test')
colnames(my_data, cnames)
colnames(my_dat) <- cnames
colnames(my_data) <- cnames
my_data
args(lm)
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4, 5, 10))
submit()
submit()
?
remainder
submit
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){c(8, 4, 0)},[1])
evaluate(function(x){c(8, 4, 0)})
evaluate(function(x) {[1]}, c(8, 4, 0))
info()
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[lenght(x)]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Helll", "world")
submit
submit()
mad_libs(Houten, angry, allowance)
mad_libs(place = "Houten", adjective = "angry", noun = "allowance")
submit()
%p%("I", "love", "R")
"I" %p% "love" %p% "R"
%p%("I", "love", "R!")
"I" %p% "love" %p% "R!"
library(dplyr)
complete <- function(directory, id = 1:332) {
# alle data in 1 dataframe, maak eerst een lijst met alle bestandjes
# hierdoor kan je deze in de loop opnemen
allfiles <- list.files(directory, full.names = TRUE)
# maak een leeg dataframe aan waar de data in moet komen
dat <- data_frame()
for(i in id) {
dat <- rbind(dat, read.csv(allfiles[i]))
}
# selecteer alleen de complete data
# dus excludeer de rijen met een of meer NA
# let op: dit resulteert in een logische vector
complete <- complete.cases(dat)
nobsperID <- select(dat[complete, ], c(Date, ID))
nobsperID <- count(nobsperID, ID)
colnames(nobsperID) <- c("id", "nobs")
}
allfiles <- list.files("specdata", full.names = TRUE)
dat <- data_frame()
for(i in id) {
dat <- rbind(dat, read.csv(allfiles[i]))
}
?runif
?gl
search()
a <- matrix(1:4, 2, 2)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
makeCacheMatrix(a)
makeCacheMatrix(c(1,2,3,4))
cacheSolve(a)
class(a)
a
a <- makeCacheMatrix(c(1,2,3,4))
cacheSolve(a)
a <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(a)
cacheSolve(a)
b <- makeCacheMatrix(matrix(c(1,2,12,13), 2, 2))
cacheSolve(b)
cacheSolve(b)
library(datasets)
data(iris)
?iris
summary(iris)
View(iris)
lapply(iris$Species = virginica, mean)
lapply(split(iris), mean)
split(iris)
split(iris$Sepal.Length)
s <- split(iris, iris$Species)
lapply(iris, s, mean)
lapply(split(iris, s), mean)
lapply(s, function(iris) mean)
lapply(s, function(iris) colMeans(iris[,c("Petal.Length")]))
s
summary(s)
lapply(s, mean)
lapply(split(iris, s), mean)
lapply(split(iris, iris$Species), mean)
lapply(split(iris, iris$Species[,1]), mean)
lapply(split(iris, iris$Sepal.Length), mean)
lapply(s, mean)
sapply(s, mean)
sapply(iris, mean)
s
sapply(iris, colMeans)
sapply(s, colMeans)
sapply(iris, colMeans)
apply(s$virginica, 1, mean)
apply(s$virginica, 2, mean)
sapply(s$virginica, 2, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
tapply(iris, s, mean)
s
tapply(iris$Sepal.Length, Species , mean)
tapply(iris$Sepal.Length, iris$Species , mean)
library(datasets)
data(mtcars)
?mtcars
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
View(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
?abs
y <- abs(x([1]-[3]))
y <- x([1]-[3])
y <- x([1])-x([3])
y <- x(,[1])-x(,[3])
y <- x(1-3)
class(x)
y <- x(x[1-3])
y <- (x[1-3])
y <- abs((x[1]-x[3]))
y
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x
y
20921429-8263636
tapply(iris$Sepal.Length, iris$Species , mean)
debug(ls)
ls
exit
exit()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lappy(unique_vals, function(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4 replace = TRUE)
ample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(c(0,1), 100, prob = 0.7)
flips2 <- rbinom(100, 1, prob = 0.7)
flips2
sum(heads)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(10)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
py_pois
my_pois
cm <- colMeans(my_pois)
hist(cm)
library(xlsx)
read.xlsx("NGAP.xlsx", sheetIndex=1, header=TRUE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = "NGAP.xlsx", method = "curl")
NGAP <- read.xlsx("NGAP.xlsx", sheetIndex=1, header=TRUE)
dat <- read.xlsx("NGAP.xlsx", sheetIndex=1, colIndex=colIndex, rowIndex=rowIndex)
colIndex <- 7:15
rowIndex <- 18:23
dat <- read.xlsx("NGAP.xlsx", sheetIndex=1, colIndex=colIndex, rowIndex=rowIndex)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("XML")
library(XML)
doc <- xmlTreeParse(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml, useInternal=TRUE)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=TRUE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
doc <- xmlTreeParse(fileUrl, useInternal=TRUE, method = "curl")
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
doc
rootNode <- xmlRoot(doc) # wrapper for entire document
xmlName(rootNode)
names(rootNode)
xpathSApply(rootNode,"//zipcode",xmlValue)
zipcode <- xpathSApply(rootNode,"//zipcode",xmlValue)
summary(zipcode)
table(zipcode)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile = "housingIdaho2.csv", method = "curl")
install.packages("data.table")
library(data.table)
?"data.table"
?fread
DT <- fread(housingIdaho2.csv)
DT <- fread("housingIdaho2.csv")
summary(DT)
head(DT)
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages("httr")
setwd("~/Workspace/Coursera/04 Exploratory data analysis/ExData_Plotting1")
setwd("~/Workspace/Coursera/04 Exploratory data analysis")
hpc <- read.table("houshold_power_consumption.txt", na.strings = "?", header = TRUE, sep = ";")
hpc <- read.table("household_power_consumption.txt", na.strings = "?", header = TRUE, sep = ";")
temp <- read.table("household_power_consumption.txt", na.strings = "?", header = TRUE, sep = ";")
?read.table
View(hpc)
hpc <- read.table("household_power_consumption.txt", na.strings = "?", header = TRUE, sep = ";")
hpc$data <- as.Date(hpc$Date, format = "%d/%m/%Y")
hpc$timetemp <- paste(hpc$Date, hpc$Time)
hpc$Time <- strptime(hpc$timetemp, format = "%Y-%m-%d %H:%M:%S")
subset(hpc, Date >= "01/02/2007" & Date <= "02/02/2007")
View(hpc)
str(hpc)
hpc <- read.table("household_power_consumption.txt", na.strings = "?", header = TRUE, sep = ";")
str(hpc)
hpc$Date <- as.Date(hpc$Date, format = "%d/%m/%Y")
str(hpc)
hpc$timetemp <- paste(hpc$Date, hpc$Time)
hpc$Time <- strptime(hpc$timetemp, format = "%Y-%m-%d %H:%M:%S")
subset(hpc, Date >= "01/02/2007" & Date <= "02/02/2007")
hpc <- subset(hpc, Date >= "01/02/2007" & Date <= "02/02/2007")
hpc <- read.table("household_power_consumption.txt", na.strings = "?", header = TRUE, sep = ";")
# convert Date to dateformat
hpc$Date <- as.Date(hpc$Date, format = "%d/%m/%Y")
# fix timeproblem
hpc$timetemp <- paste(hpc$Date, hpc$Time)
hpc$Time <- strptime(hpc$timetemp, format = "%Y-%m-%d %H:%M:%S")
# select only specific dates
hpc <- subset(hpc, Date >= "01/02/2007" & Date <= "02/02/2007")
hpc <- read.table("household_power_consumption.txt", na.strings = "?", header = TRUE, sep = ";")
# convert Date to dateformat
hpc$Date <- as.Date(hpc$Date, format = "%d/%m/%Y")
# fix timeproblem
hpc$timetemp <- paste(hpc$Date, hpc$Time)
hpc$Time <- strptime(hpc$timetemp, format = "%Y-%m-%d %H:%M:%S")
hpc <- hpc[Date >= "01/02/2007" & Date <= "02/02/2007",]
hpc <- hpc[hpc$Date >= "01/02/2007" & hpc$Date <= "02/02/2007",]
hpc <- read.table("household_power_consumption.txt", na.strings = "?", header = TRUE, sep = ";")
# convert Date to dateformat
hpc$Date <- as.Date(hpc$Date, format = "%d/%m/%Y")
# fix timeproblem
hpc$timetemp <- paste(hpc$Date, hpc$Time)
hpc$Time <- strptime(hpc$timetemp, format = "%Y-%m-%d %H:%M:%S")
data <- hpc[hpc$Date >= "01/02/2007" & hpc$Date <= "02/02/2007",]
head(hpc)
hpc <- hpc[hpc$Date >= "2007-02-01" & hpc$Date <= "2007-02-02",]
hist(hpc, Global_active_power, col = "red")
hist(Global_active_power, col = "red")
hist(hpc$Global_active_power, col = "red")
hist(hpc$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Pwer (kilowatts)")
?par
?png
png(file = "plot1.png")
hist(hpc$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
dev.off()
setwd("~/Workspace/Coursera/04 Exploratory data analysis/ExData_Plotting1")
hpc <- read.table("household_power_consumption.txt", na.strings = "?", header = TRUE, sep = ";")
# convert Date to dateformat
hpc$Date <- as.Date(hpc$Date, format = "%d/%m/%Y")
# fix timeproblem
hpc$timetemp <- paste(hpc$Date, hpc$Time)
hpc$Time <- strptime(hpc$timetemp, format = "%Y-%m-%d %H:%M:%S")
# select only specific dates
hpc <- hpc[hpc$Date >= "2007-02-01" & hpc$Date <= "2007-02-02",]
# make plot1
png(file = "plot1.png")
hist(hpc$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
dev.off()
plot(hpc$Time, hpc$Global_active_power, type = "l", ylab = "Global Active Power (kilowatts)")
plot(hpc$Time, hpc$Global_active_power, type = "l",
xlab = "", ylab = "Global Active Power (kilowatts)")
Sys.setlocale("LC_TIME", "English")
Sys.setlocale("LC_TIME", "C")
plot(hpc$Time, hpc$Global_active_power, type = "l",
xlab = "", ylab = "Global Active Power (kilowatts)")
png(file = "plot2.png")
plot(hpc$Time, hpc$Global_active_power, type = "l",
xlab = "", ylab = "Global Active Power (kilowatts)")
dev.off()
summary(hpc)
plot(hpc$Time, hpc$Sub_metering_1, type = "n",
xlab = "", ylab = "Energy sub metering")
points(hpc$Time, hpc$Sub_metering_1, type = "l")
points(hpc$Time, hpc$Sub_metering_2, type = "l", col = "red")
points(hpc$Time, hpc$Sub_metering_3, type = "l", col = "blue")
plot(hpc$Time, hpc$Sub_metering_1, type = "n",
xlab = "", ylab = "Energy sub metering")
lines(hpc$Time, hpc$Sub_metering_1)
lines(hpc$Time, hpc$Sub_metering_2, col = "red")
lines(hpc$Time, hpc$Sub_metering_3, col = "blue")
legend("topright", legend = "")
?legend
plot(hpc$Time, hpc$Sub_metering_1, type = "n",
xlab = "", ylab = "Energy sub metering")
lines(hpc$Time, hpc$Sub_metering_1)
lines(hpc$Time, hpc$Sub_metering_2, col = "red")
lines(hpc$Time, hpc$Sub_metering_3, col = "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col = c("black", "red", "blue"))
?legend
plot(hpc$Time, hpc$Sub_metering_1, type = "n",
xlab = "", ylab = "Energy sub metering")
lines(hpc$Time, hpc$Sub_metering_1)
lines(hpc$Time, hpc$Sub_metering_2, col = "red")
lines(hpc$Time, hpc$Sub_metering_3, col = "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty = 1, col = c("black", "red", "blue"))
png(file = "plot3.png")
plot(hpc$Time, hpc$Sub_metering_1, type = "n",
xlab = "", ylab = "Energy sub metering")
lines(hpc$Time, hpc$Sub_metering_1)
lines(hpc$Time, hpc$Sub_metering_2, col = "red")
lines(hpc$Time, hpc$Sub_metering_3, col = "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty = 1, col = c("black", "red", "blue"))
dev.off()
par(mfrow = c(2,2))
plot(hpc$Time, hpc$Global_active_power, type = "l",
xlab = "", ylab = "Global Active Power")
plot(hpc$Time, hpc$Voltage, type = "l",
xlab = "datetime", ylab = "Voltage")
plot(hpc$Time, hpc$Sub_metering_1, type = "n",
xlab = "", ylab = "Energy sub metering")
lines(hpc$Time, hpc$Sub_metering_1)
lines(hpc$Time, hpc$Sub_metering_2, col = "red")
lines(hpc$Time, hpc$Sub_metering_3, col = "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty = 1, col = c("black", "red", "blue"))
plot(hpc$Time, hpc$Global_reactive_power, type = "l",
xlab = "datetime", ylab = "Global_reactive_power")
png(file = "plot4.png")
par(mfrow = c(2,2))
plot(hpc$Time, hpc$Global_active_power, type = "l",
xlab = "", ylab = "Global Active Power")
plot(hpc$Time, hpc$Voltage, type = "l",
xlab = "datetime", ylab = "Voltage")
plot(hpc$Time, hpc$Sub_metering_1, type = "n",
xlab = "", ylab = "Energy sub metering")
lines(hpc$Time, hpc$Sub_metering_1)
lines(hpc$Time, hpc$Sub_metering_2, col = "red")
lines(hpc$Time, hpc$Sub_metering_3, col = "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty = 1, col = c("black", "red", "blue"))
plot(hpc$Time, hpc$Global_reactive_power, type = "l",
xlab = "datetime", ylab = "Global_reactive_power")
dev.off()
?legend
png(file = "plot4.png")
par(mfrow = c(2,2))
plot(hpc$Time, hpc$Global_active_power, type = "l",
xlab = "", ylab = "Global Active Power")
plot(hpc$Time, hpc$Voltage, type = "l",
xlab = "datetime", ylab = "Voltage")
plot(hpc$Time, hpc$Sub_metering_1, type = "n",
xlab = "", ylab = "Energy sub metering")
lines(hpc$Time, hpc$Sub_metering_1)
lines(hpc$Time, hpc$Sub_metering_2, col = "red")
lines(hpc$Time, hpc$Sub_metering_3, col = "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty = 1, bty = "n", col = c("black", "red", "blue"))
plot(hpc$Time, hpc$Global_reactive_power, type = "l",
xlab = "datetime", ylab = "Global_reactive_power")
dev.off()
